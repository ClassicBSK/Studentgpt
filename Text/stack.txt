<START>
What is a Stack?
A stack is a simple data structure used for storing data (similar to Linked Lists). In a stack, the
order in which the data arrives is important. A pile of plates in a cafeteria is a good example of a
stack. The plates are added to the stack as they are cleaned and they are placed on the top. When a
plate, is required it is taken from the top of the stack. The first plate placed on the stack is the last
one to be used.Definition: A stack is an ordered list in which insertion and deletion are done at one end, called
top. The last element inserted is the first one to be deleted. Hence, it is called the Last in First out
(LIFO) or First in Last out (FILO) list.Special names are given to the two changes that can be made to a stack. When an element is
inserted in a stack, the concept is called push, and when an element is removed from the stack, the
concept is called pop. Trying to pop out an empty stack is called underflow and trying to push an
element in a full stack is called overflow. Generally, we treat them as exceptions.



<START>
How Stacks are used
Consider a working day in the office. Let us assume a developer is working on a long-term
project. The manager then gives the developer a new task which is more important. The
developer puts the long-term project aside and begins work on the new task. The phone rings, and
this is the highest priority as it must be answered immediately. The developer pushes the present
task into the pending tray and answers the phone.
When the call is complete the task that was abandoned to answer the phone is retrieved from the
pending tray and work progresses. To take another call, it may have to be handled in the same
manner, but eventually the new task will be finished, and the developer can draw the long-term
project from the pending tray and continue with that.

<START>
Operations of a stack
The following operations make a stack an ADT. For simplicity, assume the data is an integer type.
Main stack operations • Push (int data): Inserts data onto stack. • int Pop(): Removes and returns the last inserted element from the stack.
Auxiliary stack operations • int Top(): Returns the last inserted element without removing it. • int Size(): Returns the number of elements stored in the stack. • int IsEmptyStack(): Indicates whether any elements are stored in the stack or not. • int IsFullStack(): Indicates whether the stack is full or not.

<START>
Exceptions of a stack
Attempting the execution of an operation may sometimes cause an error condition, called an
exception. Exceptions are said to be “thrown” by an operation that cannot be executed. In the
Stack ADT, operations pop and top cannot be performed if the stack is empty. Attempting the
execution of pop (top) on an empty stack throws an exception. Trying to push an element in a full
stack throws an exception.

<START>
Direct applications of a stack • Balancing of symbols • Infix-to-postfix conversion • Evaluation of postfix expression • Implementing function calls (including recursion) • Finding of spans (finding spans in stock markets, refer to Problems section) • Page-visited history in a Web browser [Back Buttons] • Undo sequence in a text editor • Matching Tags in HTML and XML
<START>
Indirect applications of a stack • Auxiliary data structure for other algorithms (Example: Tree traversal algorithms) • Component of other data structures
<START>
Implementions a stack
There are many ways of implementing stack ADT; below are the commonly used methods. • Simple array based implementation • Dynamic array based implementation • Linked lists implementation

<START>
Simple Array Implementation of a stack
This implementation of stack ADT uses an array. In the array, we add elements from left to right
and use a variable to keep track of the index of the top element.The array storing the stack elements may become full. A push operation will then throw a full
stack exception. Similarly, if we try deleting an element from an empty stack it will throw stack
empty exception.
<START>

Performance of Simple Array Implementation of a stack

Let n be the number of elements in the stack. The complexities of stack operations with this
representation can be given as:

 Space Complexity (for n push operations)  O(n) Time Complexity of Push() O(1) Time Complexity of Pop() O(1) Time Complexity of Size() O(1) Time Complexity of IsEmptyStack() O(1) Time Complexity of IsFullStackf) O(1) Time Complexity of DeleteStackQ O(1)

<START>
Limitations of Simple Array Implementation of a stack
The maximum size of the stack must first be defined and it cannot be changed. Trying to push a
new element into a full stack causes an implementation-specific exception.
<START>
Dynamic Array Implementation of stack

First, let’s consider how we implemented a simple array based stack. We took one index variable
top which points to the index of the most recently inserted element in the stack. To insert (or push)
an element, we increment top index and then place the new element at that index.

Similarly, to delete (or pop) an element we take the element at top index and then decrement the
top index. We represent an empty queue with top value equal to –1. The issue that still needs to
be resolved is what we do when all the slots in the fixed size array stack are occupied?

First try: What if we increment the size of the array by 1 every time the stack is full? • Push(); increase size of S[] by 1 • Pop(): decrease size of S[] by 1


<START>
Performance of Dynamic Array Implementation of a stack

Let n be the number of elements in the stack. The complexities for operations with this
representation can be given as:

Space Complexity (for n push operations) O(n) Time Complexity of CreateStack() O(1) Time Complexity of PushQ O(1) (Average) Time Complexity of PopQ O(1) Time Complexity of Top() O(1) Time Complexity of IsEmpryStackf) O(1)) Time Complexity of IsFullStackf) O(1) Time Complexity of DeleteStackQ O(1)

Note: Too many doublings may cause memory overflow exception.

<START>