A queue is a first-in, first-out (FIFO) data structure in which the element that is inserted first is the first one to be taken out. The elements in a queue are added at oneend called the rear and removed from the other end called the front. Like stacks,queues can be implemented by using either arrays or linked lists
A queue is a container of objects (a linear collection) that are inserted and removed according to the first-in first-out (FIFO) principle.
i)It is used in breadth search operation in graphs.ii)Job scheduler operations of OS like a print buffer queue, keyboard buffer queue to store the keys pressed by users iii)Job scheduling, CPU scheduling, Disk Scheduling iv)Priority queues are used in file downloading operations in a browser v)Data transfer between peripheral devices and CPU. vi)Interrupts generated by the user applications for CPU vii)Calls handled by the customers in BPO
Queues may be represented in the computer in various ways, usually by means at one-way lists or linear arrays. Unless otherwise stated or implied, each of our queues will be maintained by a linear array QUEUE and two pointer variables: FRONT, containing the location of the front element of the queue; and REAR, containing the location of the rear element of the queue. The condition FRONT = NULL will indicate that the queue is empty. whenever an element is deleted from the queue, the value of FRONT is increased by 1; this can be implemented by the assignment FRONT=FRONT + 1 Similarly, whenever an element is added to the queue, the value of REAR is increased by 1; this can be implemented by the assignment REAR=REAR + 1
The condition front=NULL will indicate that the queue is empty
we insert ITEM into the queue by assigning ITEM to QUEUE[1]. Specifically, instead of increasing REAR to N + 1, we reset REAR = 1 and then assign QUEUE(REAR] := ITEM
we delete an item in a queue by incrementing the value of front. if FRONT = N and an element of QUEUE is deleted, we reset FRONT = 1 instead of increasing FRONT to N + 1
we insert ITEM into the queue by assigning ITEM to QUEUE[1]. Specifically, instead of increasing REAR to N + 1, we reset REAR = 1 and then assign QUEUE(REAR] := ITEM. we delete an item in a queue by incrementing the value of front. if FRONT = N and an element of QUEUE is deleted, we reset FRONT = 1 instead of increasing FRONT to N + 1
A linked queue is a queue implemented as a linked list with two pointer variables FRONT and REAR pointing to the nodes which is in the FRONT and REAR of the queue. The INFO fields of the list hold the elements of the queue and the LINK fields hold pointers to the neighboring elements in the queue.
A deque (pronounced either "deck" or "dequeue") is a linear list in which elements can be added or removed at either end but not in the middle. The term deque is a contraction of the name double-ended queue. There are various ways of representing a deque in a computer. Unless it is otherwise stated or implied, we will assume our deque is maintained by a circular array DEQUE with pointers LEFT and RIGHT, which point to the two ends of the deque. We assume that the elements extend from the left end to the right end in the array.
A priority queue is a collection of elements such that each element has been assigned a priority and such that the order in which elements are deleted and processed comes from the following rules:i) An element of higher priority is processed before any element of lower priority.ii)Two elements with the same priority are processed according to the order in which they were added to the queue.
One way to maintain a priority queue in memory is by means of a one-way list, as follows: (a) Each node in the list will contain three items of information: an information field INFO, a priority number PRN and a link number LINK.(b) A node X precedes a node Y in the list (1) when X has higher priority than Y or (2) when both have the same priority but X was added to the list before Y. This means that the order in the one-way list corresponds to the order of the priority queue. Priority numbers will operate in the usual way: the lower the priority number, the higher the priority.
A way to maintain a priority queue in memory is to use a separate queue for each level of priority (or for each priority number). Each such queue will appear in its own circular array and must have its own pair of pointers, FRONT and REAR. In fact, if each queue is allocated the same amount of space, a two-dimensional array QUEUE can be used instead of the linear arrays. FRONT[K] and REAR[K] contain, respectively, the front and rear elements of row K of QUEUE, the row that maintains the queue of elements with priority number K.